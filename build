#!/bin/bash
# Linux Live Kit version 7

export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

CHANGEDIR=$(dirname $(readlink -f $0))
echo "Changing current directory to $CHANGEDIR"
cd $CHANGEDIR
CWD="$(pwd)"

. ./config || exit 1
. ./livekitlib || exit 1

# only root can continue, because only root can read all files from your system
allow_only_root

# check for xz
if [ "$(xz --help 2>&1 | grep -i "Compress")" = "" ]; then
   echo "xz not found or cannot compress"
   echo "you may consider installing xz-tools package"
   exit 1
fi

# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   echo "mksquashfs not found or doesn't support -comp xz, aborting, no changes made"
   echo "you may consider installing squashfs-tools package"
   exit 1
fi

XORRISO=$(which xorriso)
ISOHYBRID=$(which isohybrid)

if [[ -z ${XORISO} && -z ${ISOHYBRID} ]]; then
   echo "Cannot find xorisso and/or isohybrid, stop"
   exit 3
fi

# build initramfs image
if [ "$SKIPINITRFS" = "" ]; then
   echo "Building initramfs image..."
   cd initramfs
   INITRAMFS=$(./initramfs_create)
   cd ..
fi

# create live kit filesystem (cpio archive)
rm -Rf "$LIVEKITDATA"
BOOT="$LIVEKITDATA"/"$LIVEKITNAME"/boot
mkdir -p "$BOOT"
mkdir -p "$BOOT"/../changes
mkdir -p "$BOOT"/../modules

if [ "$INITRAMFS" != "" ]; then
   mv "$INITRAMFS" $BOOT/initrfs.img
fi

# BIOS / MBR booting
cp -r bootfiles/* $BOOT
cat bootfiles/syslinux.cfg | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" > $BOOT/syslinux.cfg
cat bootfiles/bootinst.bat | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" | sed -r "s:\\\\boot\\\\:\\\\$LIVEKITNAME\\\\boot\\\\:" > $BOOT/bootinst.bat
cp $VMLINUZ $BOOT/ || exit

# UEFI booting
mkdir -p ${LIVEKITDATA}/EFI/BOOT
mkdir -p ${LIVEKITDATA}/boot/grub/x86_64-efi
cp bootfiles/EFI/BOOT/* ${LIVEKITDATA}/EFI/BOOT
cp bootfiles/boot/grub/grub.cfg ${LIVEKITDATA}/boot/grub
cp bootfiles/boot/grub/x86_64-efi/*.mod ${LIVEKITDATA}/boot/grub/x86_64-efi

# create compressed 01-core.sb
COREFS=""
for i in $MKMOD; do
   if [ -d /$i ]; then
      COREFS="$COREFS /$i"
   fi
done
if [ "$SKIPCOREMOD" = "" ]; then
   mksquashfs $COREFS $LIVEKITDATA/$LIVEKITNAME/modules/01-core.$BEXT -comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
fi

cd "$LIVEKITDATA"
ARCH=$(uname -m)
TARGET=/tmp

cat "$CWD/bootinfo.txt" | fgrep -v "#" | sed -r "s/mylinux/$LIVEKITNAME/" | sed -r "s/\$/\x0D/" > readme.txt

echo cd $LIVEKITDATA '&&' ${XORRISO} -as mkisofs -o "${TARGET}/${LIVEKITNAME}-${ARCH}.iso" \
-U -r -v -T -J -joliet-long  -A "${LIVEKITNAME}" -V "${LIVEKITNAME}" -volset "${LIVEKITNAME}" \
-b "${LIVEKITNAME}/boot/isolinux.bin" -c "${LIVEKITNAME}/boot/boot.cat" \
-no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot \
-e /EFI/BOOT/efiboot.img -no-emul-boot .  '&&' \
${ISOHYBRID} --uefi "${TARGET}/${LIVEKITNAME}-${ARCH}.iso" \
> ${TARGET}/gen_"${LIVEKITNAME}"_iso.sh
chmod +x ${TARGET}/gen_"${LIVEKITNAME}"_iso.sh

echo cd $LIVEKITDATA '&&' zip -0 -r "$TARGET/$LIVEKITNAME-$ARCH.zip" '*' \
> $TARGET/gen_"$LIVEKITNAME"_zip.sh
chmod o+x $TARGET/gen_"$LIVEKITNAME"_zip.sh

echo "-----------------------------"
echo "Finished. Find your result in $LIVEKITDATA"
echo "To build ISO, run: $TARGET/gen_"$LIVEKITNAME"_iso.sh"
echo "To build ZIP, run: $TARGET/gen_"$LIVEKITNAME"_zip.sh"
cd $CWD
